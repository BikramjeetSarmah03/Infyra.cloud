/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/auth/_layout'
import { Route as protectedLayoutRouteImport } from './pages/(protected)/_layout'
import { Route as protectedIndexRouteImport } from './pages/(protected)/index'
import { Route as AuthRegisterRouteImport } from './pages/auth/register'
import { Route as AuthLoginRouteImport } from './pages/auth/login'
import { Route as protectedProjectLayoutRouteImport } from './pages/(protected)/$project/_layout'
import { Route as protectedProjectIndexRouteImport } from './pages/(protected)/$project/index'
import { Route as AuthPasswordForgotRouteImport } from './pages/auth/password/forgot'
import { Route as protectedProjectSettingsRouteImport } from './pages/(protected)/$project/settings'
import { Route as protectedProjectLogsRouteImport } from './pages/(protected)/$project/logs'
import { Route as protectedProjectDeploymentsRouteImport } from './pages/(protected)/$project/deployments'
import { Route as protectedProjectAnalyticsRouteImport } from './pages/(protected)/$project/analytics'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedLayoutRoute = protectedLayoutRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedIndexRoute = protectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedLayoutRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const protectedProjectLayoutRoute = protectedProjectLayoutRouteImport.update({
  id: '/$project',
  path: '/$project',
  getParentRoute: () => protectedLayoutRoute,
} as any)
const protectedProjectIndexRoute = protectedProjectIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedProjectLayoutRoute,
} as any)
const AuthPasswordForgotRoute = AuthPasswordForgotRouteImport.update({
  id: '/password/forgot',
  path: '/password/forgot',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const protectedProjectSettingsRoute =
  protectedProjectSettingsRouteImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => protectedProjectLayoutRoute,
  } as any)
const protectedProjectLogsRoute = protectedProjectLogsRouteImport.update({
  id: '/logs',
  path: '/logs',
  getParentRoute: () => protectedProjectLayoutRoute,
} as any)
const protectedProjectDeploymentsRoute =
  protectedProjectDeploymentsRouteImport.update({
    id: '/deployments',
    path: '/deployments',
    getParentRoute: () => protectedProjectLayoutRoute,
  } as any)
const protectedProjectAnalyticsRoute =
  protectedProjectAnalyticsRouteImport.update({
    id: '/analytics',
    path: '/analytics',
    getParentRoute: () => protectedProjectLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedIndexRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/$project': typeof protectedProjectLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/$project/analytics': typeof protectedProjectAnalyticsRoute
  '/$project/deployments': typeof protectedProjectDeploymentsRoute
  '/$project/logs': typeof protectedProjectLogsRoute
  '/$project/settings': typeof protectedProjectSettingsRoute
  '/auth/password/forgot': typeof AuthPasswordForgotRoute
  '/$project/': typeof protectedProjectIndexRoute
}
export interface FileRoutesByTo {
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/': typeof protectedIndexRoute
  '/$project/analytics': typeof protectedProjectAnalyticsRoute
  '/$project/deployments': typeof protectedProjectDeploymentsRoute
  '/$project/logs': typeof protectedProjectLogsRoute
  '/$project/settings': typeof protectedProjectSettingsRoute
  '/auth/password/forgot': typeof AuthPasswordForgotRoute
  '/$project': typeof protectedProjectIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(protected)': typeof protectedLayoutRouteWithChildren
  '/auth': typeof AuthLayoutRouteWithChildren
  '/(protected)/$project': typeof protectedProjectLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/(protected)/': typeof protectedIndexRoute
  '/(protected)/$project/analytics': typeof protectedProjectAnalyticsRoute
  '/(protected)/$project/deployments': typeof protectedProjectDeploymentsRoute
  '/(protected)/$project/logs': typeof protectedProjectLogsRoute
  '/(protected)/$project/settings': typeof protectedProjectSettingsRoute
  '/auth/password/forgot': typeof AuthPasswordForgotRoute
  '/(protected)/$project/': typeof protectedProjectIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/$project'
    | '/auth/login'
    | '/auth/register'
    | '/$project/analytics'
    | '/$project/deployments'
    | '/$project/logs'
    | '/$project/settings'
    | '/auth/password/forgot'
    | '/$project/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/'
    | '/$project/analytics'
    | '/$project/deployments'
    | '/$project/logs'
    | '/$project/settings'
    | '/auth/password/forgot'
    | '/$project'
  id:
    | '__root__'
    | '/(protected)'
    | '/auth'
    | '/(protected)/$project'
    | '/auth/login'
    | '/auth/register'
    | '/(protected)/'
    | '/(protected)/$project/analytics'
    | '/(protected)/$project/deployments'
    | '/(protected)/$project/logs'
    | '/(protected)/$project/settings'
    | '/auth/password/forgot'
    | '/(protected)/$project/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  protectedLayoutRoute: typeof protectedLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/': {
      id: '/(protected)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/(protected)/$project': {
      id: '/(protected)/$project'
      path: '/$project'
      fullPath: '/$project'
      preLoaderRoute: typeof protectedProjectLayoutRouteImport
      parentRoute: typeof protectedLayoutRoute
    }
    '/(protected)/$project/': {
      id: '/(protected)/$project/'
      path: '/'
      fullPath: '/$project/'
      preLoaderRoute: typeof protectedProjectIndexRouteImport
      parentRoute: typeof protectedProjectLayoutRoute
    }
    '/auth/password/forgot': {
      id: '/auth/password/forgot'
      path: '/password/forgot'
      fullPath: '/auth/password/forgot'
      preLoaderRoute: typeof AuthPasswordForgotRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/(protected)/$project/settings': {
      id: '/(protected)/$project/settings'
      path: '/settings'
      fullPath: '/$project/settings'
      preLoaderRoute: typeof protectedProjectSettingsRouteImport
      parentRoute: typeof protectedProjectLayoutRoute
    }
    '/(protected)/$project/logs': {
      id: '/(protected)/$project/logs'
      path: '/logs'
      fullPath: '/$project/logs'
      preLoaderRoute: typeof protectedProjectLogsRouteImport
      parentRoute: typeof protectedProjectLayoutRoute
    }
    '/(protected)/$project/deployments': {
      id: '/(protected)/$project/deployments'
      path: '/deployments'
      fullPath: '/$project/deployments'
      preLoaderRoute: typeof protectedProjectDeploymentsRouteImport
      parentRoute: typeof protectedProjectLayoutRoute
    }
    '/(protected)/$project/analytics': {
      id: '/(protected)/$project/analytics'
      path: '/analytics'
      fullPath: '/$project/analytics'
      preLoaderRoute: typeof protectedProjectAnalyticsRouteImport
      parentRoute: typeof protectedProjectLayoutRoute
    }
  }
}

interface protectedProjectLayoutRouteChildren {
  protectedProjectAnalyticsRoute: typeof protectedProjectAnalyticsRoute
  protectedProjectDeploymentsRoute: typeof protectedProjectDeploymentsRoute
  protectedProjectLogsRoute: typeof protectedProjectLogsRoute
  protectedProjectSettingsRoute: typeof protectedProjectSettingsRoute
  protectedProjectIndexRoute: typeof protectedProjectIndexRoute
}

const protectedProjectLayoutRouteChildren: protectedProjectLayoutRouteChildren =
  {
    protectedProjectAnalyticsRoute: protectedProjectAnalyticsRoute,
    protectedProjectDeploymentsRoute: protectedProjectDeploymentsRoute,
    protectedProjectLogsRoute: protectedProjectLogsRoute,
    protectedProjectSettingsRoute: protectedProjectSettingsRoute,
    protectedProjectIndexRoute: protectedProjectIndexRoute,
  }

const protectedProjectLayoutRouteWithChildren =
  protectedProjectLayoutRoute._addFileChildren(
    protectedProjectLayoutRouteChildren,
  )

interface protectedLayoutRouteChildren {
  protectedProjectLayoutRoute: typeof protectedProjectLayoutRouteWithChildren
  protectedIndexRoute: typeof protectedIndexRoute
}

const protectedLayoutRouteChildren: protectedLayoutRouteChildren = {
  protectedProjectLayoutRoute: protectedProjectLayoutRouteWithChildren,
  protectedIndexRoute: protectedIndexRoute,
}

const protectedLayoutRouteWithChildren = protectedLayoutRoute._addFileChildren(
  protectedLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  AuthPasswordForgotRoute: typeof AuthPasswordForgotRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  AuthPasswordForgotRoute: AuthPasswordForgotRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  protectedLayoutRoute: protectedLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
